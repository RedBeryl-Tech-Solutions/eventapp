package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubscriptionDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsAllPropertiesEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertSubscriptionDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsAllUpdatablePropertiesEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertSubscriptionDetailsUpdatableFieldsEquals(expected, actual);
        assertSubscriptionDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsAutoGeneratedPropertiesEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertThat(expected)
            .as("Verify SubscriptionDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsUpdatableFieldsEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertThat(expected)
            .as("Verify SubscriptionDetails relevant properties")
            .satisfies(e -> assertThat(e.getSubscriptionName()).as("check subscriptionName").isEqualTo(actual.getSubscriptionName()))
            .satisfies(
                e ->
                    assertThat(e.getSubscriptionAmount())
                        .as("check subscriptionAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSubscriptionAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getTaxAmount()).as("check taxAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTaxAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalAmount())
                        .as("check totalAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalAmount())
            )
            .satisfies(
                e -> assertThat(e.getSubscriptionStartDate()).as("check subscriptionStartDate").isEqualTo(actual.getSubscriptionStartDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getSubscriptionExpiryDate())
                        .as("check subscriptionExpiryDate")
                        .isEqualTo(actual.getSubscriptionExpiryDate())
            )
            .satisfies(e -> assertThat(e.getAdditionalComments()).as("check additionalComments").isEqualTo(actual.getAdditionalComments()))
            .satisfies(
                e ->
                    assertThat(e.getNotificationBeforeExpiry())
                        .as("check notificationBeforeExpiry")
                        .isEqualTo(actual.getNotificationBeforeExpiry())
            )
            .satisfies(
                e -> assertThat(e.getNotificationMuteFlag()).as("check notificationMuteFlag").isEqualTo(actual.getNotificationMuteFlag())
            )
            .satisfies(e -> assertThat(e.getNotificationTo()).as("check notificationTo").isEqualTo(actual.getNotificationTo()))
            .satisfies(e -> assertThat(e.getNotificationCc()).as("check notificationCc").isEqualTo(actual.getNotificationCc()))
            .satisfies(e -> assertThat(e.getNotificationBcc()).as("check notificationBcc").isEqualTo(actual.getNotificationBcc()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsUpdatableRelationshipsEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertThat(expected)
            .as("Verify SubscriptionDetails relationships")
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()));
    }
}
